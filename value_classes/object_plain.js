export const object_plain_disabled_values = [
	"Intl",
	"Reflect",
	"another_realm(`Intl`)",
	"another_realm(`Reflect`)",
	"module",
	"WebAssembly",
	"another_realm(`WebAssembly`)"
]
export const object_plain_values = [
	"new Proxy({}, {})",
	"new Object()",
	"new Object",
	"Object()",
	"{}",
	"Object.create(Object.prototype)",
	"Object(null)",
	"Object(undefined)",
	"Object.create(null)",
	"another_realm(`Object.create(null)`)",
	"Object.freeze({a:1})",
	"Object.preventExtensions({a:1})",
	"Object.seal({a:1})",
	"another_realm(`new Proxy({}, {})`)",
	"another_realm(`new Object()`)",
	"another_realm(`new Object`)",
	"another_realm(`Object()`)",
	"another_realm(`{}`)",
	"another_realm(`Object.create(Object.prototype)`)",
	"another_realm(`Object(null)`)",
	"another_realm(`Object(undefined)`)",
	"another_realm(`Object.freeze({a:1})`)",
	"another_realm(`Object.preventExtensions({a:1})`)",
	"another_realm(`Object.seal({a:1})`)",
	"another_realm(`{ *[Symbol.iterator]() { yield 1 } }`)",
	"another_realm(`{ length: 1 }`)",
	"another_realm(`{ a: 1, length: 1 }`)",
	"another_realm(`{ 1: 1, length: 1 }`)",
	"another_realm(`{ 1: 1, 2: 2, length: 1 }`)",
	"another_realm(`{ [Symbol.iterator]: function*() { yield 0 }, valueOf: () => 0 }`)",
	"another_realm(`{ async* [Symbol.asyncIterator]() { yield 1 } }`)",
	"another_realm(`{a:1}`)",
	"another_realm(`{ toString: function() { return \"str\" } }`)",
	"another_realm(`{ toString: function() { return \"NaN\" } }`)",
	"another_realm(`{ call: function() { return 1 } }`)",
	"another_realm(`{ length: 1.1 }`)",
	"another_realm(`{ length: NaN }`)",
	"another_realm(`{ size: 0 }`)",
	"another_realm(`{ then: () => {} }`)",
	"{ *[Symbol.iterator]() { yield 1 } }",
	"{ length: 1 }",
	"{ a: 1, length: 1 }",
	"{ 1: 1, length: 1 }",
	"{ 1: 1, 2: 2, length: 1 }",
	"{ [Symbol.iterator]: function*() { yield 0 }, valueOf: () => 0 }",
	"{ async* [Symbol.asyncIterator]() { yield 1 } }",
	"{a:1}",
	"{ toString: function() { return \"str\" } }",
	"{ toString: function() { return \"NaN\" } }",
	"{ call: function() { return 1 } }",
	"{ length: 1.1 }",
	"{ length: NaN }",
	"{ size: 0 }",
	"{ then: () => {} }"
]